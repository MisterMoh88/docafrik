// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?
  phone             String?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true)
  packType          PackType? @default(ESSENTIEL)
  packExpiresAt     DateTime?
  selectedCategory  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  documents         Document[]
  payments          Payment[]
  subscriptions     Subscription[]
  
  @@map("users")
}

model Document {
  id           String           @id @default(cuid())
  title        String
  content      String           // HTML content
  templateId   String
  templateName String
  userId       String
  status       DocumentStatus   @default(DRAFT)
  pdfUrl       String?
  wordUrl      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Template {
  id          String           @id @default(cuid())
  name        String
  description String
  category    TemplateCategory
  htmlContent String           // HTML template
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@map("templates")
}

model Pack {
  id              String  @id @default(cuid())
  name            String
  price           Int     // Price in FCFA
  features        String  // JSON string of features
  paymentLink     String? // Chariow payment link
  isActive        Boolean @default(true)
  maxDocuments    Int?    // null for unlimited
  maxTemplates    Int?    // null for unlimited
  hasAIGeneration Boolean @default(false)
  durationMonths  Int     @default(1) // Duration in months
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  subscriptions    Subscription[]
  
  @@map("packs")
}

model Payment {
  id            String       @id @default(cuid())
  userId        String
  packType      PackType
  amount        Int          // Amount in FCFA
  status        PaymentStatus @default(PENDING)
  transactionId String?
  subscriptionId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription  Subscription? @relation(fields: [subscriptionId], references: [id])
  
  @@map("payments")
}

model Subscription {
  id            String           @id @default(cuid())
  userId        String
  packId        String
  packType      PackType
  status        SubscriptionStatus @default(ACTIVE)
  startDate     DateTime         @default(now())
  endDate       DateTime
  autoRenew     Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack          Pack             @relation(fields: [packId], references: [id])
  payments      Payment[]
  
  @@map("subscriptions")
}

model AdminSession {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("admin_sessions")
}

enum UserRole {
  USER
  ADMIN
}

enum PackType {
  ESSENTIEL
  PRO
  COMPLET
}

enum TemplateCategory {
  PROFESSIONNELS
  ADMINISTRATIFS
  COMMERCIAUX
}

enum DocumentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}