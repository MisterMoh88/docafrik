#!/bin/bash

# Script de d√©ploiement DocAfrik
# Usage: ./scripts/deploy.sh [environment]

set -e

# Configuration
ENVIRONMENT=${1:-production}
APP_NAME="docafrik"
DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
BACKUP_DIR="./backups"
LOG_DIR="./logs"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions de log
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier les fichiers n√©cessaires
    if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
        log_error "Fichier $DOCKER_COMPOSE_FILE non trouv√©"
        exit 1
    fi
    
    if [ ! -f ".env.local" ]; then
        log_warning "Fichier .env.local non trouv√©, utilisation des valeurs par d√©faut"
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Cr√©ation des dossiers n√©cessaires
create_directories() {
    log_info "Cr√©ation des dossiers n√©cessaires..."
    
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$LOG_DIR"
    mkdir -p "./db"
    mkdir -p "./nginx/ssl"
    
    log_success "Dossiers cr√©√©s"
}

# Sauvegarde des donn√©es
backup_data() {
    log_info "Sauvegarde des donn√©es existantes..."
    
    if [ -f "./db/custom.db" ]; then
        BACKUP_FILE="$BACKUP_DIR/custom-$(date +%Y%m%d-%H%M%S).db"
        cp "./db/custom.db" "$BACKUP_FILE"
        log_success "Base de donn√©es sauvegard√©e: $BACKUP_FILE"
    else
        log_info "Aucune base de donn√©es √† sauvegarder"
    fi
}

# Construction de l'image Docker
build_image() {
    log_info "Construction de l'image Docker..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" build --no-cache
    
    log_success "Image Docker construite"
}

# D√©ploiement de l'application
deploy_app() {
    log_info "D√©ploiement de l'application..."
    
    # Arr√™ter les conteneurs existants
    docker-compose -f "$DOCKER_COMPOSE_FILE" down || true
    
    # D√©marrer les nouveaux conteneurs
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d
    
    log_success "Application d√©ploy√©e"
}

# V√©rification du d√©ploiement
verify_deployment() {
    log_info "V√©rification du d√©ploiement..."
    
    # Attendre que l'application d√©marre
    sleep 30
    
    # V√©rifier que les conteneurs sont en cours d'ex√©cution
    if ! docker-compose -f "$DOCKER_COMPOSE_FILE" ps | grep -q "Up"; then
        log_error "Les conteneurs ne sont pas en cours d'ex√©cution"
        docker-compose -f "$DOCKER_COMPOSE_FILE" logs
        exit 1
    fi
    
    # V√©rifier l'health check
    for i in {1..10}; do
        if curl -f http://localhost:3000/api/health &> /dev/null; then
            log_success "Health check r√©ussi"
            break
        fi
        
        if [ $i -eq 10 ]; then
            log_error "Health check √©chou√© apr√®s 10 tentatives"
            docker-compose -f "$DOCKER_COMPOSE_FILE" logs
            exit 1
        fi
        
        log_info "Attente de l'application... ($i/10)"
        sleep 10
    done
    
    log_success "D√©ploiement v√©rifi√© avec succ√®s"
}

# Nettoyage
cleanup() {
    log_info "Nettoyage des anciennes images..."
    
    docker image prune -f
    
    log_success "Nettoyage termin√©"
}

# Affichage des informations
show_info() {
    log_success "D√©ploiement termin√© avec succ√®s !"
    echo
    echo "üåê Application disponible: http://localhost:3000"
    echo "üìä Logs: docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
    echo "üõ†Ô∏è  Arr√™ter: docker-compose -f $DOCKER_COMPOSE_FILE down"
    echo "üîÑ Red√©marrer: docker-compose -f $DOCKER_COMPOSE_FILE restart"
    echo
    echo "üìã Informations syst√®me:"
    docker-compose -f "$DOCKER_COMPOSE_FILE" ps
}

# Fonction principale
main() {
    log_info "D√©ploiement de DocAfrik en environnement: $ENVIRONMENT"
    echo
    
    check_prerequisites
    create_directories
    backup_data
    build_image
    deploy_app
    verify_deployment
    cleanup
    show_info
}

# Gestion des erreurs
trap 'log_error "Une erreur est survenue pendant le d√©ploiement"; exit 1' ERR

# Ex√©cution
main "$@"